// services/pdfService.js
import { PDFDocument, StandardFonts } from "pdf-lib";

export async function buildCoursePDF(course, questions, meta = {}) {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]); // A4 portrait
  const font = await pdfDoc.embedFont(StandardFonts.TimesRoman);
  const bold = await pdfDoc.embedFont(StandardFonts.TimesRomanBold);

  const { height } = page.getSize();
  let y = height - 50;

  const write = (text, opts = {}) => {
    const { fontType = font, size = 12 } = opts;
    page.drawText(text, { x: 50, y, font: fontType, size });
    y -= 20;
  };

  // ðŸ“Œ Header (once at the top)
  write(`${course.code} â€“ ${course.title}`, { fontType: bold, size: 18 });
  write(`LTP: ${course.ltp_structure}`, { size: 11 });
  write(`Generated by: ${meta.generatedBy || "System"} on ${meta.generatedAt || new Date().toLocaleDateString()}`, { size: 10 });
  y -= 15;

  // ðŸ“Œ Course Outcomes
  if (course.outcomes?.length) {
    write("Course Outcomes:", { fontType: bold });
    for (const co of course.outcomes) {
      write(`${co.co_number}: ${co.description}`, { size: 10 });
    }
    y -= 15;
  }

  // ðŸ“Œ Questions
  write("Questions:", { fontType: bold, size: 14 });
  let qNo = 1;
  for (const q of questions) {
    write(`${qNo}. ${q.content} [${q.co_number || "CO?"}]`, { size: 11 });

    if (q.question_type === "mcq" && q.options) {
      const labels = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      q.options.forEach((opt, i) => {
        write(`   ${labels[i]}. ${opt.option_text}`, { size: 10 });
      });
    }

    qNo++;
    y -= 5;
  }

  // ðŸ“Œ Footer (fixed position, not in write-loop)
  page.drawText("Tezpur University â€“ Question Paper", {
    x: 200,
    y: 30,
    size: 9,
    font
  });

  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
}
